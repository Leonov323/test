{"version":3,"sources":["components/header/HeaderStyled.js","components/header/index.js","Global.js","components/main/MainStyled.js","store/features/counterSlice.js","store/features/cityApiSlice.js","store/features/resDataSlice.js","store/features/loadingSlice.js","store/features/inputSlice.js","store/features/refreshDataSlice.js","store/features/refreshLoadingSlice.js","store/features/savedSlice.js","store/index.js","common/services/getWeather.js","components/main/searchForm/SearchFormStyled.js","components/main/searchForm/index.js","components/main/CardInfo/mainCard/MainCardStyled.js","components/main/CardInfo/takeData.js","components/main/CardInfo/mainCard/index.js","components/main/CardInfo/index.js","components/main/cards/MainCardStyled.js","common/services/getRefresh.js","components/main/cards/index.js","common/map/index.js","components/main/index.js","App.js","index.js"],"names":["HeaderStyled","styled","header","Header","GlobalStyles","createGlobalStyle","MainStyled","Container","Row1","Row","Row2","Row3","Col1","Col","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","cityApiSlice","error","setCity","setErrorTrue","setErrorFalse","selectError","cityApi","resDataSlice","setData","selectResData","resData","loadingSlice","setFalse","selectLoading","loading","inputSlice","setInput","refreshInput","selectInput","input","refreshDataSlice","setRefreshData","refreshLoadingSlice","setTrue","savedSlice","setSavedFalse","setSavedTrue","selectSaved","saved","store","configureStore","reducer","counterReducer","cityApiReducer","resDataReducer","loadingReducer","inputReducer","refreshData","refreshDataReducer","refreshLoading","refreshLoadingReducer","savedReducer","GetWeather","city","getState","URL","localStorage","removeItem","dispatch","axios","get","then","res","data","console","log","catch","err","ErrorStyled","h6","SearchForm","useDispatch","useSelector","useEffect","FloatingLabel","label","Form","Control","type","onChange","e","target","Button","className","onClick","CardStyled","Card","ButtonStyled","animation","keyframes","SavedAlertStyled","Alert","props","animate","TakeData","prop","MainCard","temperature","Math","floor","main","temp","feels_like","weatherImg","weather","icon","description","storage","Body","Title","ListGroup","variant","Item","Image","src","alt","width","height","setItem","JSON","stringify","CardInfo","humidity","pressure","max","temp_max","min","temp_min","date","Date","toLocaleDateString","time","toLocaleTimeString","md","SpinnerStyled","Spinner","TakeData2","GetRefresh","Cards","useState","spinner","setSpinner","window","scrollTo","setTimeout","delete","CardList","keys","Object","list","forEach","element","items","getItem","parse","push","Data","length","map","index","Main","count","React","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"qLAEaA,EAAeC,IAAOC,OAAV,sK,OCCZC,EAAS,WACpB,OACE,cAACH,EAAD,wICHSI,EAAeC,YAAH,sN,wBCCZC,EAAaL,YAAOM,IAAPN,CAAH,gOAWVO,EAAOP,YAAOQ,IAAPR,CAAH,+CAIJS,EAAOT,YAAOQ,IAAPR,CAAH,mDAIJU,EAAOV,YAAOQ,IAAPR,CAAH,4IAOJW,EAAOX,YAAOY,IAAPZ,CAAH,wG,gDCvBJa,EAAeC,YAAY,CACtCC,KAAM,UACNC,aANmB,CACnBC,MAAO,GAMPC,SAAU,CACRC,UAAW,SAACC,GACVA,EAAMH,OAAS,GAEjBI,UAAW,SAACD,GACVA,EAAMH,OAAS,GAEjBK,kBAAmB,SAACF,EAAOG,GACzBH,EAAMH,OAASM,EAAOC,Y,EAK+BX,EAAaY,QAAzDN,E,EAAAA,UAEFO,G,EAFaL,U,EAAWC,kBAEV,SAACF,GAAD,OAAWA,EAAMO,QAAQV,QAErCJ,IAAf,QCnBae,EAAed,YAAY,CACtCC,KAAM,UACNC,aAPmB,CACnBC,MAAO,OACPY,OAAO,GAMPX,SAAU,CACRY,QAAS,SAACV,EAAD,GAAyB,IAAfI,EAAc,EAAdA,QACjBJ,EAAMH,MAAQO,GAEhBO,aAAc,SAACX,GACbA,EAAMS,OAAQ,GAEhBG,cAAe,SAACZ,GACdA,EAAMS,OAAQ,M,EAKoCD,EAAaH,QAAtDK,E,EAAAA,QAASC,E,EAAAA,aAAcC,E,EAAAA,cAIzBC,EAAc,SAACb,GAAD,OAAWA,EAAMc,QAAQL,OAErCD,IAAf,QCvBaO,GAAerB,YAAY,CACtCC,KAAM,UACNC,aANmB,CACnBC,MAAO,IAMPC,SAAU,CACRkB,QAAS,SAAChB,EAAD,GAAyB,IAAfI,EAAc,EAAdA,QACjBJ,EAAMH,MAAQO,MAKLY,GAAYD,GAAaV,QAAzBW,QAEFC,GAAgB,SAACjB,GAAD,OAAWA,EAAMkB,QAAQrB,OAEvCkB,MAAf,QCdaI,GAAezB,YAAY,CACtCC,KAAM,UACNC,aANmB,CACnBC,OAAO,GAMPC,SAAU,CACRsB,SAAU,SAACpB,GACTA,EAAMH,OAAQ,MAKLuB,GAAaD,GAAad,QAA1Be,SAEFC,GAAgB,SAACrB,GAAD,OAAWA,EAAMsB,QAAQzB,OAEvCsB,MAAf,QCdaI,GAAa7B,YAAY,CACpCC,KAAM,QACNC,aANmB,CACnBC,MAAO,IAMPC,SAAU,CACR0B,SAAU,SAACxB,EAAD,GAAyB,IAAfI,EAAc,EAAdA,QAClBJ,EAAMH,MAAQO,GAEhBqB,aAAc,SAACzB,GACbA,EAAMH,MAAQ,O,GAKsB0B,GAAWlB,QAAtCmB,G,GAAAA,SAAUC,G,GAAAA,aAEZC,GAAc,SAAC1B,GAAD,OAAWA,EAAM2B,MAAM9B,OAEnC0B,MAAf,QCjBaK,GAAmBlC,YAAY,CAC1CC,KAAM,cACNC,aANmB,CACnBC,MAAO,IAMPC,SAAU,CACR+B,eAAgB,SAAC7B,EAAD,GAAyB,IAAfI,EAAc,EAAdA,QACxBJ,EAAMH,MAAQO,MAKLyB,GAAmBD,GAAiBvB,QAApCwB,eAIAD,MAAf,QCdaE,GAAsBpC,YAAY,CAC7CC,KAAM,iBACNC,aANmB,CACnBC,OAAO,GAMPC,SAAU,CACRsB,SAAU,SAACpB,GACTA,EAAMH,OAAQ,GAEhBkC,QAAS,SAAC/B,GACRA,EAAMH,OAAQ,M,GAKiBiC,GAAoBzB,QAA1Ce,G,GAAAA,SAIAU,I,GAJUC,QAIVD,GAAf,SCjBaE,GAAatC,YAAY,CACpCC,KAAM,QACNC,aANmB,CACnBC,OAAO,GAMPC,SAAU,CACRmC,cAAe,SAACjC,GACdA,EAAMH,OAAQ,GAEhBqC,aAAc,SAAClC,GACbA,EAAMH,OAAQ,M,GAK2BmC,GAAW3B,QAA3C4B,G,GAAAA,cAAeC,G,GAAAA,aAEjBC,GAAc,SAACnC,GAAD,OAAWA,EAAMoC,MAAMvC,OAEnCmC,MAAf,QCbaK,GAAQC,YAAe,CAClCC,QAAS,CACPhC,QAASiC,EACT1B,QAAS2B,EACT9B,aAAc8B,EACd7B,cAAe6B,EACfvB,QAASwB,GACTpB,QAASqB,GACThB,MAAOiB,GACPC,YAAaC,GACbC,eAAgBC,GAChBZ,MAAOa,MCVEC,GAAa,WACxB,IAAMC,EAAOd,GAAMe,WAAWtC,QAAQjB,MAEhCwD,EAAG,4DAAwDF,EAAxD,kBADM,oCAGfG,aAAaC,WAAW,aACxBlB,GAAMmB,SAASzD,KAEf0D,IAAMC,IAAIL,GACPM,MAAK,SAAAC,GACJvB,GAAMmB,SAASxC,GAAQ4C,EAAIC,OAC3BxB,GAAMmB,SAASpC,MACfiB,GAAMmB,SAAS/B,MACfY,GAAMmB,SAASvB,MACfI,GAAMmB,SAAS5C,KAEfkD,QAAQC,IAAI,kBAAmBH,EAAIC,SAEpCG,OAAM,SAAAC,GACL5B,GAAMmB,SAAS7C,KACfmD,QAAQC,IAAIE,O,SC7BLC,GAActF,IAAOuF,GAAV,6HAKT,qBAAGtE,MAAoB,QAAU,UCCnCuE,GAAa,WACxB,IAAMZ,EAAWa,eACX1C,EAAQ2C,aAAY5C,IACpBjB,EAAQ6D,aAAYzD,GAM1B,MALc,KAAVc,GACF6B,EAAS9C,EAAQiB,IFuBnB4C,qBAAU,WACRrB,OACC,IEpBD,qCACE,cAACgB,GAAD,CAAarE,MAAOY,EAApB,4BACA,cAAC+D,EAAA,EAAD,CAAeC,MAAM,kBAArB,SACE,cAACC,EAAA,EAAKC,QAAN,CACEC,KAAK,OACLC,SAAU,SAACC,GAAD,OAAOtB,EAAShC,GAASsD,EAAEC,OAAOlF,SAC5CA,MAAO8B,MAGX,cAACqD,EAAA,EAAD,CAAQC,UAAU,mBAAmBC,QAAShC,GAA9C,wB,oCCxBOiC,GAAavG,YAAOwG,KAAPxG,CAAH,sJASVyG,GAAezG,YAAOoG,IAAPpG,CAAH,8CAInB0G,GAAYC,YAAH,gIAOFC,GAAmB5G,YAAO6G,KAAP7G,CAAH,iMACZ0G,IAMF,SAAAI,GAAK,OAAIA,EAAMC,QAAU,QAAU,UC5BrCC,GAAW,SAACC,GAEvB,OAAgB,IADAxD,GAAMe,WAAW9B,QAAQzB,MAEhCgG,EACO,MCKLC,GAAW,WACtB,IAAMxE,EAAUgD,aAAYjD,IACtBwC,EAAOS,aAAYrD,IACnBmB,EAAQkC,aAAYnC,IACpBqB,EAAWa,eAEX1E,EAAOiG,GAAStE,EAAU,GAAKuC,EAAKlE,MACpCoG,EAAcC,KAAKC,MAAML,GAAStE,EAAU,GAAKuC,EAAKqC,KAAKC,MAAQ,QACnEC,EAAaJ,KAAKC,MAAML,GAAStE,EAAU,GAAKuC,EAAKqC,KAAKE,YAAc,QACxEC,EAAaT,GAAStE,EAAU,MAAQuC,EAAKyC,QAAQ,GAAGC,MACxDC,EAAcZ,GAAStE,EAAU,GAAKuC,EAAKyC,QAAQ,GAAGJ,MAEtDO,EAAU,CACd9G,KAAMA,EACNoG,YAAaA,EACbK,WAAYA,EACZC,WAAYA,EACZG,YAAaA,GASf,OACE,eAACrB,GAAD,WACE,eAACC,GAAA,EAAKsB,KAAN,WACE,cAACtB,GAAA,EAAKuB,MAAN,UAAahH,IACb,eAACiH,GAAA,EAAD,CAAWC,QAAQ,QAAnB,UACE,cAACD,GAAA,EAAUE,KAAX,UACE,4BAAIN,MAEN,eAACI,GAAA,EAAUE,KAAX,WACE,cAACC,GAAA,EAAD,CACEC,IAAG,4CAAuCX,EAAvC,WAA4DY,IAAI,UACnEC,MAAM,OACNC,OAAO,SAET,iCAAOpB,EAAP,gBAEF,cAACa,GAAA,EAAUE,KAAX,UACE,6CAAgBV,EAAhB,cAEF,cAACQ,GAAA,EAAUE,KAAX,UACE,cAACzB,GAAD,CAAcwB,QAAQ,OAAO3B,QA1B1B,WACX1B,EAAStB,MACTsB,EAASzD,KACTuD,aAAa8D,QAAQzH,EAAM0H,KAAKC,UAAUb,KAuBlC,0BAIN,cAACjB,GAAD,CAAkBG,QAASvD,EAA3B,uBCrDOmF,GAAW,WACtB,IAAMjG,EAAUgD,aAAYjD,IACtBwC,EAAOS,aAAYrD,IAEnBuG,EAAW5B,GAAStE,EAAU,GAAKuC,EAAKqC,KAAKsB,UAC7CC,EAAW7B,GAAStE,EAAU,GAAKuC,EAAKqC,KAAKuB,UAC7CC,EAAM1B,KAAKC,MAAML,GAAStE,EAAU,GAAKuC,EAAKqC,KAAKyB,UAAY,QAC/DC,EAAM5B,KAAKC,MAAML,GAAStE,EAAU,GAAKuC,EAAKqC,KAAK2B,UAAY,QAE/DC,GAAO,IAAIC,MAAOC,qBAClBC,GAAO,IAAIF,MAAOG,qBAExB,OACE,cAAChJ,EAAA,EAAD,UACE,eAACE,EAAA,EAAD,WACE,cAACI,EAAA,EAAD,CAAK2I,GAAI,EAAT,SACE,cAAC,GAAD,MAEF,eAAC3I,EAAA,EAAD,WACE,uBACA,+BAAKsI,EAAL,IAAYG,KACZ,uBACA,2CAAcT,KACd,2CAAcC,EAAd,OACA,kDAAqBC,KACrB,kDAAqBE,KACrB,gC,kBC/BGzC,GAAavG,YAAOwG,KAAPxG,CAAH,sNAMJ,qBAAGiB,MAAoB,OAAS,WAOtCwF,GAAezG,YAAOoG,IAAPpG,CAAH,0FAGX,qBAAGiB,MAAoB,OAAS,aAGjCuI,GAAgBxJ,YAAOyJ,KAAPzJ,CAAH,4GAIX,qBAAGiB,MAAoB,OAAS,UCnBzCyI,GAAY,SAACzC,GAEjB,OAAuB,IADAxD,GAAMe,WAAWL,eAAelD,MAE9CgG,EACO,MAGL0C,GAAa,SAACpF,GACzB,IAAMU,EAAOxB,GAAMe,WAAWP,YAAYhD,MACpCyB,EAAUe,GAAMe,WAAWL,eAAelD,MAE1CkG,EAAcC,KAAKC,MAAMqC,GAAUhH,EAAU,GAAKuC,EAAKqC,KAAKC,MAAQ,QACpEC,EAAaJ,KAAKC,MAAMqC,GAAUhH,EAAU,GAAKuC,EAAKqC,KAAKE,YAAc,QACzEC,EAAaiC,GAAUhH,EAAU,MAAQuC,EAAKyC,QAAQ,GAAGC,MACzDC,EAAc8B,GAAUhH,EAAU,GAAKuC,EAAKyC,QAAQ,GAAGJ,MAEvDO,EAAU,CACd9G,KAAMwD,EACN4C,YAAaA,EACbK,WAAYA,EACZC,WAAYA,EACZG,YAAaA,GAITnD,EAAG,4DAAwDF,EAAxD,kBADM,oCAGfM,IAAMC,IAAIL,GACPM,MAAK,SAAAC,GACJvB,GAAMmB,SAAS3B,GAAe+B,EAAIC,OAClCxB,GAAMmB,SAASpC,MACfiB,GAAMmB,SAASzD,KACf+D,QAAQC,IAAI,mBAAoBH,EAAIC,SAErCF,MAAK,WACJL,aAAa8D,QAAQjE,EAAMkE,KAAKC,UAAUb,OAE3C9C,MAAK,kBAAMtB,GAAMmB,SAASzD,QAC1BiE,OAAM,SAAAC,GAAG,OAAIH,QAAQC,IAAIE,OCnCjBuE,GAAQ,SAAC9C,GACpB,IAAM/F,EAAO+F,EAAM/F,KACb6D,EAAWa,eAFa,EAeAoE,oBAAS,GAfT,oBAevBC,EAfuB,KAedC,EAfc,KA2B9B,OACE,eAAC,GAAD,CAAY9I,MAAO6I,EAAnB,UAEE,eAACtD,GAAA,EAAKsB,KAAN,CAAWxB,QArBQ,WACrB1B,EAAS9C,EAAQf,IACjBuD,KACA0F,OAAOC,SAAS,EAAG,IAkBjB,UACE,cAACzD,GAAA,EAAKuB,MAAN,UAAajB,EAAM/F,OAEnB,eAACiH,GAAA,EAAD,CAAWC,QAAQ,QAAnB,UAEE,cAACD,GAAA,EAAUE,KAAX,UACE,4BAAIpB,EAAMc,gBAEZ,eAACI,GAAA,EAAUE,KAAX,WACE,cAACC,GAAA,EAAD,CACEC,IAAG,4CAAuCtB,EAAMW,WAA7C,WAAkEY,IAAI,UACzEC,MAAM,OACNC,OAAO,SAET,iCAAOzB,EAAMK,YAAb,gBAEF,cAACa,GAAA,EAAUE,KAAX,UACE,6CAAgBpB,EAAMU,WAAtB,iBAIJ,cAACgC,GAAD,CAAe9C,UAAU,SAASuB,QAAQ,UAAUhH,MAAO6I,OAE7D,cAAC,GAAD,CACE7B,QAAQ,UACR3B,QAvCS,WACbyD,GAAW,GACXJ,GAAW5I,GACXmJ,YAAW,WACTP,GAAW5I,KACV,KACHmJ,YAAW,WACTH,GAAW,KACV,MAgCC9I,MAAO6I,EAHT,qBAOA,cAAC,GAAD,CAAc7B,QAAQ,SAAS3B,QAxDpB,WACb5B,aAAaC,WAAWmC,EAAMqD,QAC9BvF,EAASzD,MAsDP,wBClEOiJ,GAAW,WACtB,IAAMC,EAAOC,OAAOD,KAAK3F,cAYnB6F,EAVO,WACX,IAAMvF,EAAM,GAMZ,OALAqF,EAAKG,SAAQ,SAAAC,GACX,IAAMC,EAAQhG,aAAaiG,QAAQF,GAC7BG,EAAQnC,KAAKmC,MAAMF,GACzB1F,EAAI6F,KAAKD,MAEJ5F,EAGI8F,GA2Bb,OAxBMT,EAAKU,OAAS,EACT,mCACJR,EAAKS,KAAI,WAMPC,GAAW,IALZlK,EAKW,EALXA,KACAoG,EAIW,EAJXA,YACAK,EAGW,EAHXA,WACAC,EAEW,EAFXA,WACAG,EACW,EADXA,YAEA,OAAO,cAAC,GAAD,CACL7G,KAAMA,EACNoG,YAAaA,EACbK,WAAYA,EACZC,WAAYA,EACZG,YAAaA,EACbuC,OAAQpJ,GACHkK,QAIJ,mBAAG5E,UAAU,mBAAb,6BChCA6E,GAAO,WAClB,IAAMC,EAAQzF,aAAYhE,GAI1B,OAFA0J,IAAMzF,WAAU,WAAQyE,OAAc,CAACe,IAGjC,eAAC9K,EAAD,WACI,cAACE,EAAD,UACI,cAACI,EAAD,UACI,cAAC,GAAD,QAGR,cAACF,EAAD,UACI,cAACE,EAAD,UACI,cAAC,GAAD,QAGR,cAACD,EAAD,UACI,cAAC,GAAD,UCXD2K,GAVH,WACV,OACE,qCACE,cAAClL,EAAD,IACA,cAAC,EAAD,IACA,cAAC,GAAD,Q,MCHNmL,IAASC,OACP,cAAC,IAAMC,WAAP,UACE,cAAC,KAAD,CAAU/H,MAAOA,GAAjB,SACE,cAAC,GAAD,QAGJgI,SAASC,eAAe,W","file":"static/js/main.255d9035.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const HeaderStyled = styled.header`\r\n    background: black;\r\n    color: white;\r\n    height: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n","import React from 'react'\r\nimport { HeaderStyled } from './HeaderStyled'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <HeaderStyled>\r\n      Тестовое задание для React dev\r\n    </HeaderStyled>\r\n  )\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0; \r\n  }\r\n\r\n  *, *::after, *::before {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  body {\r\n    background: #f8f9fA;\r\n    width: 100%;\r\n    }\r\n  `\r\n","import styled from 'styled-components'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nexport const MainStyled = styled(Container)`\r\n    width: 100%;\r\n    min-height: calc(100vh - 50px);\r\n    .row {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border: 1px solid white;\r\n    }\r\n`\r\n\r\nexport const Row1 = styled(Row)`\r\n    height: 20vh;\r\n`\r\n\r\nexport const Row2 = styled(Row)`\r\n    min-height: 75vh;\r\n`\r\n\r\nexport const Row3 = styled(Row)`\r\n    min-height: 30rem;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: space-around;\r\n`\r\n\r\nexport const Col1 = styled(Col)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: 0\n}\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    }\n  }\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport const selectCount = (state) => state.counter.value\n\nexport default counterSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: 'Rome',\n  error: false\n}\n\nexport const cityApiSlice = createSlice({\n  name: 'cityApi',\n  initialState,\n  reducers: {\n    setCity: (state, { payload }) => {\n      state.value = payload\n    },\n    setErrorTrue: (state) => {\n      state.error = true\n    },\n    setErrorFalse: (state) => {\n      state.error = false\n    }\n  }\n})\n\nexport const { setCity, setErrorTrue, setErrorFalse } = cityApiSlice.actions\n\nexport const selectCity = (state) => state.cityApi.value\n\nexport const selectError = (state) => state.cityApi.error\n\nexport default cityApiSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {}\n}\n\nexport const resDataSlice = createSlice({\n  name: 'resData',\n  initialState,\n  reducers: {\n    setData: (state, { payload }) => {\n      state.value = payload\n    }\n  }\n})\n\nexport const { setData } = resDataSlice.actions\n\nexport const selectResData = (state) => state.resData.value\n\nexport default resDataSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: true\n}\n\nexport const loadingSlice = createSlice({\n  name: 'loading',\n  initialState,\n  reducers: {\n    setFalse: (state) => {\n      state.value = false\n    }\n  }\n})\n\nexport const { setFalse } = loadingSlice.actions\n\nexport const selectLoading = (state) => state.loading.value\n\nexport default loadingSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: ''\n}\n\nexport const inputSlice = createSlice({\n  name: 'input',\n  initialState,\n  reducers: {\n    setInput: (state, { payload }) => {\n      state.value = payload\n    },\n    refreshInput: (state) => {\n      state.value = ''\n    }\n  }\n})\n\nexport const { setInput, refreshInput } = inputSlice.actions\n\nexport const selectInput = (state) => state.input.value\n\nexport default inputSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {}\n}\n\nexport const refreshDataSlice = createSlice({\n  name: 'refreshData',\n  initialState,\n  reducers: {\n    setRefreshData: (state, { payload }) => {\n      state.value = payload\n    }\n  }\n})\n\nexport const { setRefreshData } = refreshDataSlice.actions\n\nexport const selectRefresh = (state) => state.refreshData.value\n\nexport default refreshDataSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: true\n}\n\nexport const refreshLoadingSlice = createSlice({\n  name: 'refreshLoading',\n  initialState,\n  reducers: {\n    setFalse: (state) => {\n      state.value = false\n    },\n    setTrue: (state) => {\n      state.value = true\n    }\n  }\n})\n\nexport const { setFalse, setTrue } = refreshLoadingSlice.actions\n\nexport const selectRefreshLoading = (state) => state.refreshLoading.value\n\nexport default refreshLoadingSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: false\n}\n\nexport const savedSlice = createSlice({\n  name: 'saved',\n  initialState,\n  reducers: {\n    setSavedFalse: (state) => {\n      state.value = false\n    },\n    setSavedTrue: (state) => {\n      state.value = true\n    }\n  }\n})\n\nexport const { setSavedFalse, setSavedTrue } = savedSlice.actions\n\nexport const selectSaved = (state) => state.saved.value\n\nexport default savedSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './features/counterSlice'\nimport cityApiReducer from './features/cityApiSlice'\nimport resDataReducer from './features/resDataSlice'\nimport loadingReducer from './features/loadingSlice'\nimport inputReducer from './features/inputSlice'\nimport refreshDataReducer from './features/refreshDataSlice'\nimport refreshLoadingReducer from './features/refreshLoadingSlice'\nimport savedReducer from './features/savedSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    cityApi: cityApiReducer,\n    setErrorTrue: cityApiReducer,\n    setErrorFalse: cityApiReducer,\n    resData: resDataReducer,\n    loading: loadingReducer,\n    input: inputReducer,\n    refreshData: refreshDataReducer,\n    refreshLoading: refreshLoadingReducer,\n    saved: savedReducer\n\n  }\n})\n","import axios from 'axios'\r\nimport { store } from '../../store'\r\nimport { setData } from '../../store/features/resDataSlice'\r\nimport { useEffect } from 'react'\r\nimport { setFalse } from '../../store/features/loadingSlice'\r\nimport { refreshInput } from '../../store/features/inputSlice'\r\nimport { setSavedFalse } from '../../store/features/savedSlice'\r\nimport { setErrorFalse, setErrorTrue } from '../../store/features/cityApiSlice'\r\nimport { increment } from '../../store/features/counterSlice'\r\n// import { GetHoursTemp } from './getHoursTemp'\r\n\r\nexport const GetWeather = () => {\r\n  const city = store.getState().cityApi.value\r\n  const apiKey = 'bfda20ca597bc0f4138fa15d276de911'\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\r\n\r\n  localStorage.removeItem('__agwt_rt')\r\n  store.dispatch(increment())\r\n\r\n  axios.get(URL)\r\n    .then(res => {\r\n      store.dispatch(setData(res.data))\r\n      store.dispatch(setFalse())\r\n      store.dispatch(refreshInput())\r\n      store.dispatch(setSavedFalse())\r\n      store.dispatch(setErrorFalse())\r\n      // GetHoursTemp()\r\n      console.log('GetWeather Res:', res.data)\r\n    })\r\n    .catch(err => {\r\n      store.dispatch(setErrorTrue())\r\n      console.log(err)\r\n    })\r\n}\r\n\r\nexport const GetWeatherEffect = () => {\r\n  useEffect(() => {\r\n    GetWeather()\r\n  }, [])\r\n}\r\n","import styled from 'styled-components'\r\n\r\nexport const ErrorStyled = styled.h6`\r\n    position: absolute;\r\n    top: 55px;\r\n    margin: 0 auto;\r\n    color: red;\r\n    display: ${({ value }) => value ? 'block' : 'none'}\r\n`\r\n","import React from 'react'\r\nimport { Form, FloatingLabel, Button } from 'react-bootstrap'\r\nimport { GetWeather, GetWeatherEffect } from '../../../common/services/getWeather'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectInput, setInput } from '../../../store/features/inputSlice'\r\nimport { selectError, setCity } from '../../../store/features/cityApiSlice'\r\nimport { ErrorStyled } from './SearchFormStyled'\r\n\r\nexport const SearchForm = () => {\r\n  const dispatch = useDispatch()\r\n  const input = useSelector(selectInput)\r\n  const error = useSelector(selectError)\r\n  if (input !== '') {\r\n    dispatch(setCity(input))\r\n  }\r\n  GetWeatherEffect()\r\n\r\n  return (\r\n    <>\r\n      <ErrorStyled value={error}>City not found</ErrorStyled>\r\n      <FloatingLabel label=\"Enter city name\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          onChange={(e) => dispatch(setInput(e.target.value))}\r\n          value={input}\r\n        />\r\n      </FloatingLabel>\r\n      <Button className=\"ms-4 btn-success\" onClick={GetWeather}>Search</Button>\r\n    </>\r\n  )\r\n}\r\n","import { Card, Button, Alert } from 'react-bootstrap'\r\nimport styled, { keyframes } from 'styled-components'\r\n\r\nexport const CardStyled = styled(Card)`\r\n    width: 18rem;\r\n    height: 21rem;\r\n    margin: 0 auto;\r\n    @media (max-width: 321px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const ButtonStyled = styled(Button)`\r\n    width: 100%;\r\n`\r\n\r\nconst animation = keyframes`\r\n    0% { opacity: 0; }\r\n    10% { opacity: 1; }\r\n    50% { opacity: 1; }\r\n    100% { opacity: 0; }\r\n`\r\n\r\nexport const SavedAlertStyled = styled(Alert)`\r\n    animation: ${animation} 3s ease-out;\r\n    text-align: center;\r\n    position: absolute;\r\n    transition: all 1s linear;\r\n    right: 0;\r\n    opacity: 0;\r\n    display: ${props => props.animate ? 'block' : 'none'};\r\n`\r\n","import { store } from '../../../store'\r\n\r\nexport const TakeData = (prop) => {\r\n  const loading = store.getState().loading.value\r\n  if (loading === false) {\r\n    return prop\r\n  } else { return null }\r\n}\r\n","/* eslint-disable camelcase */\r\nimport React from 'react'\r\nimport { Card, ListGroup, Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectResData } from '../../../../store/features/resDataSlice'\r\nimport { CardStyled, ButtonStyled, SavedAlertStyled } from './MainCardStyled'\r\nimport { TakeData } from '../takeData'\r\nimport { selectLoading } from '../../../../store/features/loadingSlice'\r\nimport { increment } from '../../../../store/features/counterSlice'\r\nimport { selectSaved, setSavedTrue } from '../../../../store/features/savedSlice'\r\n\r\nexport const MainCard = () => {\r\n  const loading = useSelector(selectLoading)\r\n  const data = useSelector(selectResData)\r\n  const saved = useSelector(selectSaved)\r\n  const dispatch = useDispatch()\r\n\r\n  const name = TakeData(loading ? '' : data.name)\r\n  const temperature = Math.floor(TakeData(loading ? '' : data.main.temp) - 273.15)\r\n  const feels_like = Math.floor(TakeData(loading ? '' : data.main.feels_like) - 273.15)\r\n  const weatherImg = TakeData(loading ? '50d' : data.weather[0].icon)\r\n  const description = TakeData(loading ? '' : data.weather[0].main)\r\n\r\n  const storage = {\r\n    name: name,\r\n    temperature: temperature,\r\n    feels_like: feels_like,\r\n    weatherImg: weatherImg,\r\n    description: description\r\n  }\r\n\r\n  const Save = () => {\r\n    dispatch(setSavedTrue())\r\n    dispatch(increment())\r\n    localStorage.setItem(name, JSON.stringify(storage))\r\n  }\r\n\r\n  return (\r\n    <CardStyled>\r\n      <Card.Body>\r\n        <Card.Title>{name}</Card.Title>\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item>\r\n            <p>{description}</p>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Image\r\n              src={`https://openweathermap.org/img/wn/${weatherImg}@2x.png`} alt='weather'\r\n              width='50px'\r\n              height='50px'\r\n            />\r\n            <span>{temperature} °C </span>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <p> Feels like {feels_like} °C</p>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <ButtonStyled variant='dark' onClick={Save}>Save</ButtonStyled>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n      </Card.Body>\r\n      <SavedAlertStyled animate={saved}>Saved</SavedAlertStyled>\r\n    </CardStyled>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { MainCard } from './mainCard'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectResData } from '../../../store/features/resDataSlice'\r\nimport { selectLoading } from '../../../store/features/loadingSlice'\r\nimport { TakeData } from './takeData'\r\n\r\nexport const CardInfo = () => {\r\n  const loading = useSelector(selectLoading)\r\n  const data = useSelector(selectResData)\r\n\r\n  const humidity = TakeData(loading ? '' : data.main.humidity)\r\n  const pressure = TakeData(loading ? '' : data.main.pressure)\r\n  const max = Math.floor(TakeData(loading ? '' : data.main.temp_max) - 273.15)\r\n  const min = Math.floor(TakeData(loading ? '' : data.main.temp_min) - 273.15)\r\n\r\n  const date = new Date().toLocaleDateString()\r\n  const time = new Date().toLocaleTimeString()\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={6}>\r\n          <MainCard />\r\n        </Col>\r\n        <Col>\r\n          <hr />\r\n          <h5>{date} {time}</h5>\r\n          <hr />\r\n          <p>Humidity: {humidity}</p>\r\n          <p>Pressure: {pressure} </p>\r\n          <p>Max temperature: {max}</p>\r\n          <p>Min temperature: {min}</p>\r\n          <hr />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n\r\n  )\r\n}\r\n","import { Card, Button, Spinner } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\nexport const CardStyled = styled(Card)`\r\n    width: 18rem;\r\n    height: 22rem;\r\n    margin: 20px auto;\r\n    .list-group {\r\n        height: 11rem;\r\n        display: ${({ value }) => value ? 'none' : 'block'}\r\n    }\r\n    .card-body {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const ButtonStyled = styled(Button)`\r\n    width: 100%;\r\n    margin-bottom: 15px;\r\n    cursor: ${({ value }) => value ? 'wait' : 'pointer'};\r\n`\r\n\r\nexport const SpinnerStyled = styled(Spinner)`\r\n    position: relative;\r\n    top: 25%;\r\n    margin: 0 auto;\r\n    display: ${({ value }) => value ? 'flex' : 'none'};\r\n`\r\n","/* eslint-disable camelcase */\r\nimport axios from 'axios'\r\nimport { store } from '../../store'\r\nimport { increment } from '../../store/features/counterSlice'\r\nimport { setRefreshData } from '../../store/features/refreshDataSlice'\r\nimport { setFalse } from '../../store/features/refreshLoadingSlice'\r\n\r\nconst TakeData2 = (prop) => {\r\n  const refreshLoading = store.getState().refreshLoading.value\r\n  if (refreshLoading === false) {\r\n    return prop\r\n  } else { return null }\r\n}\r\n\r\nexport const GetRefresh = (city) => {\r\n  const data = store.getState().refreshData.value\r\n  const loading = store.getState().refreshLoading.value\r\n\r\n  const temperature = Math.floor(TakeData2(loading ? '' : data.main.temp) - 273.15)\r\n  const feels_like = Math.floor(TakeData2(loading ? '' : data.main.feels_like) - 273.15)\r\n  const weatherImg = TakeData2(loading ? '50d' : data.weather[0].icon)\r\n  const description = TakeData2(loading ? '' : data.weather[0].main)\r\n\r\n  const storage = {\r\n    name: city,\r\n    temperature: temperature,\r\n    feels_like: feels_like,\r\n    weatherImg: weatherImg,\r\n    description: description\r\n  }\r\n\r\n  const apiKey = 'bfda20ca597bc0f4138fa15d276de911'\r\n  const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\r\n\r\n  axios.get(URL)\r\n    .then(res => {\r\n      store.dispatch(setRefreshData(res.data))\r\n      store.dispatch(setFalse())\r\n      store.dispatch(increment())\r\n      console.log('GetRefresh Res: ', res.data)\r\n    })\r\n    .then(() => {\r\n      localStorage.setItem(city, JSON.stringify(storage))\r\n    })\r\n    .then(() => store.dispatch(increment()))\r\n    .catch(err => console.log(err))\r\n}\r\n","import React, { useState } from 'react'\r\nimport PropTypes from 'prop-types'\r\nimport { Card, ListGroup, Image } from 'react-bootstrap'\r\nimport { CardStyled, ButtonStyled, SpinnerStyled } from './MainCardStyled'\r\nimport { useDispatch } from 'react-redux'\r\nimport { increment } from '../../../store/features/counterSlice'\r\nimport { GetRefresh } from '../../../common/services/getRefresh'\r\nimport { setCity } from '../../../store/features/cityApiSlice'\r\nimport { GetWeather } from '../../../common/services/getWeather'\r\n\r\nexport const Cards = (props) => {\r\n  const name = props.name\r\n  const dispatch = useDispatch()\r\n\r\n  const Delete = () => {\r\n    localStorage.removeItem(props.delete)\r\n    dispatch(increment())\r\n  }\r\n\r\n  const HandleShowInfo = () => {\r\n    dispatch(setCity(name))\r\n    GetWeather()\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  const [spinner, setSpinner] = useState(false)\r\n  const Handle = () => {\r\n    setSpinner(true)\r\n    GetRefresh(name)\r\n    setTimeout(() => {\r\n      GetRefresh(name)\r\n    }, 400)\r\n    setTimeout(() => {\r\n      setSpinner(false)\r\n    }, 600)\r\n  }\r\n\r\n  return (\r\n    <CardStyled value={spinner} >\r\n\r\n      <Card.Body onClick={HandleShowInfo}>\r\n        <Card.Title>{props.name}</Card.Title>\r\n\r\n        <ListGroup variant=\"flush\">\r\n\r\n          <ListGroup.Item>\r\n            <p>{props.description}</p>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Image\r\n              src={`https://openweathermap.org/img/wn/${props.weatherImg}@2x.png`} alt='weather'\r\n              width='50px'\r\n              height='50px'\r\n            />\r\n            <span>{props.temperature} °C </span>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <p> Feels like {props.feels_like} °C</p>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <SpinnerStyled animation=\"border\" variant=\"warning\" value={spinner} />\r\n      </Card.Body>\r\n      <ButtonStyled\r\n        variant='success'\r\n        onClick={Handle}\r\n        value={spinner}\r\n      >\r\n        Refresh\r\n      </ButtonStyled>\r\n      <ButtonStyled variant='danger' onClick={Delete}>Delete</ButtonStyled>\r\n    </CardStyled>\r\n  )\r\n}\r\n\r\nCards.propTypes = {\r\n  name: PropTypes.string,\r\n  delete: PropTypes.string,\r\n  description: PropTypes.string,\r\n  temperature: PropTypes.number,\r\n  feels_like: PropTypes.number,\r\n  weatherImg: PropTypes.string\r\n}\r\n","/* eslint-disable camelcase */\r\nimport { Cards } from '../../components/main/cards'\r\nimport React from 'react'\r\n\r\nexport const CardList = () => {\r\n  const keys = Object.keys(localStorage)\r\n\r\n  const Data = () => {\r\n    const res = []\r\n    keys.forEach(element => {\r\n      const items = localStorage.getItem(element)\r\n      const parse = JSON.parse(items)\r\n      res.push(parse)\r\n    })\r\n    return res\r\n  }\r\n\r\n  const list = Data()\r\n\r\n  const Render = () => {\r\n    if (keys.length > 0) {\r\n      return <>\r\n        {list.map(({\r\n          name,\r\n          temperature,\r\n          feels_like,\r\n          weatherImg,\r\n          description\r\n        }, index) => {\r\n          return <Cards\r\n            name={name}\r\n            temperature={temperature}\r\n            feels_like={feels_like}\r\n            weatherImg={weatherImg}\r\n            description={description}\r\n            delete={name}\r\n            key={index} />\r\n        })}\r\n      </>\r\n    } else {\r\n      return <p className=\"text-center mt-5\">No saved cards</p>\r\n    }\r\n  }\r\n\r\n  return Render()\r\n}\r\n","import React from 'react'\r\nimport { MainStyled, Row1, Row2, Row3, Col1 } from './MainStyled'\r\nimport { SearchForm } from './searchForm'\r\nimport { CardInfo } from './CardInfo'\r\nimport { CardList } from '../../common/map'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectCount } from '../../store/features/counterSlice'\r\n\r\nexport const Main = () => {\r\n  const count = useSelector(selectCount)\r\n\r\n  React.useEffect(() => { CardList() }, [count])\r\n\r\n  return (\r\n        <MainStyled>\r\n            <Row1>\r\n                <Col1>\r\n                    <SearchForm />\r\n                </Col1>\r\n            </Row1>\r\n            <Row2>\r\n                <Col1>\r\n                    <CardInfo />\r\n                </Col1>\r\n            </Row2>\r\n            <Row3>\r\n                <CardList />\r\n            </Row3>\r\n        </MainStyled>\r\n  )\r\n}\r\n","import React from 'react'\nimport { Header } from './components/header'\nimport { GlobalStyles } from './Global'\nimport { Main } from './components/main'\n\nconst App = () => {\n  return (\n    <>\n      <GlobalStyles />\n      <Header />\n      <Main />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { store } from './store'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}