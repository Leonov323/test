{"version":3,"sources":["components/header/HeaderStyled.js","components/header/index.js","Global.js","components/main/MainStyled.js","store/features/counterSlice.js","store/features/cityApiSlice.js","store/features/resDataSlice.js","store/features/loadingSlice.js","store/features/inputSlice.js","store/features/refreshDataSlice.js","store/features/refreshLoadingSlice.js","store/index.js","common/services/getHoursTemp.js","common/services/getWeather.js","components/main/searchForm/index.js","components/main/CardInfo/mainCard/MainCardStyled.js","components/main/CardInfo/takeData.js","components/main/CardInfo/mainCard/index.js","components/main/CardInfo/index.js","components/main/cards/MainCardStyled.js","common/services/getRefresh.js","components/main/cards/index.js","common/map/index.js","components/main/index.js","App.js","index.js"],"names":["HeaderStyled","styled","header","Header","GlobalStyles","createGlobalStyle","WrapperStyled","Container","Row1","Row","Row2","Row3","Col1","Col","Col2","counterSlice","createSlice","name","initialState","value","reducers","increment","state","decrement","incrementByAmount","action","payload","actions","selectCount","counter","cityApiSlice","setCity","resDataSlice","setData","selectResData","resData","loadingSlice","setFalse","selectLoading","loading","inputSlice","setInput","refreshInput","selectInput","input","refreshDataSlice","setRefreshData","refreshLoadingSlice","setTrue","store","configureStore","reducer","counterReducer","cityApi","cityApiReducer","resDataReducer","loadingReducer","inputReducer","refreshData","refreshDataReducer","refreshLoading","refreshLoadingReducer","GetHoursTemp","city","getState","URL","axios","get","then","res","console","log","data","catch","err","GetWeather","dispatch","SearchForm","useDispatch","useSelector","useEffect","FloatingLabel","label","Form","Control","type","onChange","e","target","Button","className","onClick","CardStyled","Card","ButtonStyled","TakeData","prop","MainCard","temperature","Math","floor","main","temp","feels_like","weatherImg","weather","icon","description","storage","Body","Title","ListGroup","variant","Item","Image","src","alt","width","height","localStorage","setItem","JSON","stringify","CardInfo","humidity","pressure","max","temp_max","min","temp_min","date","Date","toLocaleDateString","time","toLocaleTimeString","md","SpinnerStyled","Spinner","TakeData2","GetRefresh","Cards","props","useState","spinner","setSpinner","window","scrollTo","animation","setTimeout","removeItem","delete","CardList","keys","Object","list","forEach","element","items","getItem","parse","push","Data","length","map","index","Main","count","React","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.673b64cc.chunk.js","sourcesContent":["import styled from 'styled-components'\r\n\r\nexport const HeaderStyled = styled.header`\r\n    background: black;\r\n    color: white;\r\n    height: 50px;\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n","import React from 'react'\r\nimport { HeaderStyled } from './HeaderStyled'\r\n\r\nexport const Header = () => {\r\n  return (\r\n    <HeaderStyled>\r\n      Тестовое задание для React dev\r\n    </HeaderStyled>\r\n  )\r\n}\r\n","import { createGlobalStyle } from 'styled-components'\r\n\r\nexport const GlobalStyles = createGlobalStyle`\r\n  html, body {\r\n    margin: 0;\r\n    padding: 0; \r\n  }\r\n\r\n  *, *::after, *::before {\r\n    box-sizing: border-box;\r\n  }\r\n  \r\n  body {\r\n    background: #f8f9fA;\r\n    width: 100%;\r\n    }\r\n  `\r\n","import styled from 'styled-components'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\n\r\nexport const WrapperStyled = styled(Container)`\r\n    width: 100%;\r\n    min-height: calc(100vh - 50px);\r\n    .row {\r\n        display: flex;\r\n        justify-content: center;\r\n        align-items: center;\r\n        border: 1px solid white;\r\n    }\r\n`\r\n\r\nexport const Row1 = styled(Row)`\r\n    height: 20vh;\r\n`\r\n\r\nexport const Row2 = styled(Row)`\r\n    min-height: 75vh;\r\n`\r\n\r\nexport const Row3 = styled(Row)`\r\n    min-height: 30rem;\r\n    display: flex;\r\n    justify-content: space-around;\r\n    align-items: space-around;\r\n`\r\n\r\nexport const Col1 = styled(Col)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\nexport const Col2 = styled(Col)`\r\n    display: flex;\r\n    justify-content: center;\r\n    align-items: center;\r\n`\r\n\r\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: 0,\n};\n\nexport const counterSlice = createSlice({\n  name: 'counter',\n  initialState,\n  reducers: {\n    increment: (state) => {\n      state.value += 1\n    },\n    decrement: (state) => {\n      state.value -= 1\n    },\n    incrementByAmount: (state, action) => {\n      state.value += action.payload\n    },\n  },\n})\n\nexport const { increment, decrement, incrementByAmount } = counterSlice.actions\n\nexport const selectCount = (state) => state.counter.value\n\nexport default counterSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: 'Rome',\n};\n\nexport const cityApiSlice = createSlice({\n  name: 'cityApi',\n  initialState,\n  reducers: {\n    setCity: (state, { payload }) => {\n      state.value = payload\n    },\n  },\n})\n\nexport const { setCity } = cityApiSlice.actions\n\nexport const selectCity = (state) => state.cityApi.value\n\nexport default cityApiSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {} ,\n};\n\nexport const resDataSlice = createSlice({\n  name: 'resData',\n  initialState,\n  reducers: {\n    setData: (state, { payload }) => {\n      state.value = payload\n    },\n  },\n})\n\nexport const { setData } = resDataSlice.actions\n\nexport const selectResData = (state) => state.resData.value\n\nexport default resDataSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: true,\n};\n\nexport const loadingSlice = createSlice({\n  name: 'loading',\n  initialState,\n  reducers: {\n    setFalse: (state) => {\n      state.value = false\n    },\n  },\n})\n\nexport const { setFalse } = loadingSlice.actions\n\nexport const selectLoading = (state) => state.loading.value\n\nexport default loadingSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: '',\n};\n\nexport const inputSlice = createSlice({\n  name: 'input',\n  initialState,\n  reducers: {\n    setInput: (state, { payload }) => {\n      state.value = payload\n    },\n    refreshInput: (state) => {\n      state.value = ''\n    },\n  },\n})\n\nexport const { setInput, refreshInput } = inputSlice.actions\n\nexport const selectInput = (state) => state.input.value\n\nexport default inputSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: {},\n}\n\nexport const refreshDataSlice = createSlice({\n  name: 'refreshData',\n  initialState,\n  reducers: {\n    setRefreshData: (state, { payload }) => {\n      state.value = payload\n    },\n  },\n})\n\nexport const { setRefreshData } = refreshDataSlice.actions\n\nexport const selectRefresh = (state) => state.refreshData.value\n\nexport default refreshDataSlice.reducer\n","import { createSlice } from '@reduxjs/toolkit'\n\nconst initialState = {\n  value: true,\n};\n\nexport const refreshLoadingSlice = createSlice({\n  name: 'refreshLoading',\n  initialState,\n  reducers: {\n    setFalse: (state) => {\n      state.value = false\n    },\n    setTrue: (state) => {\n      state.value = true\n    },\n  },\n})\n\nexport const { setFalse, setTrue } = refreshLoadingSlice.actions\n\nexport const selectRefreshLoading = (state) => state.refreshLoading.value\n\nexport default refreshLoadingSlice.reducer\n","import { configureStore } from '@reduxjs/toolkit'\nimport counterReducer from './features/counterSlice'\nimport cityApiReducer from './features/cityApiSlice'\nimport resDataReducer from './features/resDataSlice'\nimport loadingReducer from './features/loadingSlice'\nimport inputReducer from './features/inputSlice'\nimport refreshDataReducer  from './features/refreshDataSlice'\nimport refreshLoadingReducer from './features/refreshLoadingSlice'\n\nexport const store = configureStore({\n  reducer: {\n    counter: counterReducer,\n    cityApi: cityApiReducer,\n    resData: resDataReducer,\n    loading: loadingReducer,\n    input: inputReducer,\n    refreshData: refreshDataReducer,\n    refreshLoading: refreshLoadingReducer\n    \n  },\n});\n","import axios from \"axios\"\r\nimport { store } from '../../store'\r\nimport { useEffect } from \"react\"\r\n\r\n\r\nexport const GetHoursTemp = () => {\r\n\r\n    const city = store.getState().cityApi.value\r\n    const apiKey = 'bfda20ca597bc0f4138fa15d276de911'\r\n    const URL = `https://api.openweathermap.org/data/2.5/forecast?q=${city}&appid=${apiKey}`\r\n\r\n\r\n    axios.get(URL)\r\n        .then(res => {\r\n            console.log('GetHoursTemp Res:', res.data)\r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n}\r\n\r\n\r\nexport const GetHoursTempEffect = () => {\r\n    useEffect(() => {\r\n        GetHoursTemp()\r\n    }, [])\r\n}\r\n\r\n","import axios from \"axios\"\r\nimport { store } from '../../store'\r\nimport { setData } from \"../../store/features/resDataSlice\"\r\nimport { useEffect } from \"react\"\r\nimport { setFalse } from \"../../store/features/loadingSlice\"\r\nimport { refreshInput } from \"../../store/features/inputSlice\"\r\nimport { GetHoursTemp } from './getHoursTemp'\r\n\r\nexport const GetWeather = () => {\r\n\r\n    const city = store.getState().cityApi.value\r\n    const apiKey = 'bfda20ca597bc0f4138fa15d276de911'\r\n    const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\r\n\r\n\r\n    axios.get(URL)\r\n        .then(res => {\r\n            store.dispatch(setData(res.data))\r\n            store.dispatch(setFalse())\r\n            store.dispatch(refreshInput())\r\n            GetHoursTemp()\r\n            console.log('GetWeather Res:', res.data)\r\n        })\r\n        .catch(err => console.log(err))\r\n\r\n}\r\n\r\n\r\nexport const GetWeatherEffect = () => {\r\n    useEffect(() => {\r\n        GetWeather()\r\n    }, [])\r\n}\r\n\r\n","import React from 'react'\r\nimport { Form, FloatingLabel, Button } from 'react-bootstrap'\r\nimport { GetWeather, GetWeatherEffect } from '../../../common/services/getWeather'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectInput } from '../../../store/features/inputSlice'\r\nimport { setInput } from \"../../../store/features/inputSlice\"\r\nimport { setCity } from '../../../store/features/cityApiSlice'\r\n\r\nexport const SearchForm = () => {\r\n  const dispatch = useDispatch()\r\n  const input = useSelector(selectInput)\r\n  if (input !== '') {\r\n    dispatch(setCity(input))\r\n  }\r\n  GetWeatherEffect()\r\n\r\n  return (\r\n    <>\r\n      <FloatingLabel label=\"Enter city name\">\r\n        <Form.Control\r\n          type=\"text\"\r\n          onChange={(e) => dispatch(setInput(e.target.value))}\r\n          value={input}\r\n        />\r\n      </FloatingLabel>\r\n      <Button className=\"ms-4 btn-success\" onClick={GetWeather}>Search</Button>\r\n    </>\r\n  )\r\n}\r\n","import { Card, Button } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\n\r\nexport const CardStyled = styled(Card)`\r\n    width: 18rem;\r\n    margin: 0 auto;\r\n    @media (max-width: 321px) {\r\n        width: 100%;\r\n    }\r\n`\r\n\r\nexport const ButtonStyled = styled(Button)`\r\n    width: 100%;\r\n`\r\n","import { store } from '../../../store'\r\n\r\n\r\n\r\nexport const TakeData = (prop) => {\r\n    const loading = store.getState().loading.value\r\n    if (loading === false) {\r\n        return prop\r\n    } else { return null }\r\n\r\n}\r\n\r\n\r\n","import React from 'react'\r\nimport { Card, ListGroup, Image } from 'react-bootstrap'\r\nimport { useDispatch, useSelector } from 'react-redux'\r\nimport { selectResData } from '../../../../store/features/resDataSlice'\r\nimport { CardStyled, ButtonStyled } from './MainCardStyled'\r\nimport { TakeData } from '../takeData'\r\nimport { selectLoading } from '../../../../store/features/loadingSlice'\r\nimport { increment } from '../../../../store/features/counterSlice'\r\n\r\nexport const MainCard = () => {\r\n\r\n  const loading = useSelector(selectLoading)\r\n  const data = useSelector(selectResData)\r\n  const dispatch = useDispatch()\r\n\r\n  const name = TakeData(loading ? '' : data.name)\r\n  const temperature = Math.floor(TakeData(loading ? '' : data.main.temp) - 273.15)\r\n  const feels_like = Math.floor(TakeData(loading ? '' : data.main.feels_like) - 273.15)\r\n  const weatherImg = TakeData(loading ? '50d' : data.weather[0].icon)\r\n  const description = TakeData(loading ? '' : data.weather[0].main)\r\n\r\n  const storage = {\r\n    name: name,\r\n    temperature: temperature,\r\n    feels_like: feels_like,\r\n    weatherImg: weatherImg,\r\n    description: description\r\n  }\r\n\r\n  const Save = () => {\r\n\r\n    dispatch(increment())\r\n    localStorage.setItem(name, JSON.stringify(storage))\r\n\r\n  }\r\n\r\n  return (\r\n    <CardStyled>\r\n\r\n      <Card.Body>\r\n\r\n        <Card.Title>{name}</Card.Title>\r\n\r\n        <ListGroup variant=\"flush\">\r\n          <ListGroup.Item>\r\n            <p>{description}</p>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Image\r\n              src={`http://openweathermap.org/img/wn/${weatherImg}@2x.png`} alt='weather'\r\n              width='50px'\r\n              height='50px'\r\n            />\r\n            <span>{temperature} °C </span>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <p> Feels like {feels_like} °C</p>\r\n          </ListGroup.Item>\r\n\r\n          <ListGroup.Item>\r\n\r\n            <ButtonStyled variant='dark' onClick={Save}>Save</ButtonStyled>\r\n\r\n          </ListGroup.Item>\r\n\r\n        </ListGroup>\r\n\r\n      </Card.Body>\r\n\r\n    </CardStyled>\r\n  )\r\n}\r\n","import React from 'react'\r\nimport { Container, Row, Col } from 'react-bootstrap'\r\nimport { MainCard } from './mainCard'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectResData } from '../../../store/features/resDataSlice'\r\nimport { selectLoading } from '../../../store/features/loadingSlice'\r\nimport { TakeData } from './takeData'\r\n\r\nexport const CardInfo = () => {\r\n\r\n  const loading = useSelector(selectLoading)\r\n  const data = useSelector(selectResData)\r\n\r\n  const humidity = TakeData(loading ? '' : data.main.humidity)\r\n  const pressure = TakeData(loading ? '' : data.main.pressure)\r\n  const max = Math.floor(TakeData(loading ? '' : data.main.temp_max) - 273.15)\r\n  const min = Math.floor(TakeData(loading ? '' : data.main.temp_min) - 273.15)\r\n\r\n  const date = new Date('2015-02-24T21:23').toLocaleDateString()\r\n  const time = new Date().toLocaleTimeString()\r\n\r\n  return (\r\n    <Container>\r\n      <Row>\r\n        <Col md={6}>\r\n          <MainCard />\r\n        </Col>\r\n        <Col>\r\n          <hr />\r\n          <h5>{date} {time}</h5>\r\n          <hr />\r\n          <p>Humidity: {humidity}</p>\r\n          <p>Pressure: {pressure} </p>\r\n          <p>Max temperature: {max}</p>\r\n          <p>Min temperature: {min}</p>\r\n          <hr />\r\n        </Col>\r\n      </Row>\r\n    </Container>\r\n\r\n  )\r\n}\r\n","import { Card, Button, Spinner } from 'react-bootstrap'\r\nimport styled from 'styled-components'\r\n\r\n\r\n\r\nexport const CardStyled = styled(Card)`\r\n    width: 18rem;\r\n    height: 22rem;\r\n    margin: 20px auto;\r\n    \r\n    .list-group {\r\n        height: 11rem;\r\n        display: ${({ value }) => value ? \"none\" : \"block\"}\r\n    }\r\n    .hide {\r\n        \r\n    }\r\n    .card-body {\r\n        cursor: pointer;\r\n    }\r\n`\r\n\r\nexport const ButtonStyled = styled(Button)`\r\n    width: 100%;\r\n    margin-bottom: 15px;\r\n    cursor: ${({ value }) => value ? 'wait' : 'pointer'};\r\n`\r\n\r\nexport const SpinnerStyled = styled(Spinner)`\r\n    position: relative;\r\n    top: 25%;\r\n    margin: 0 auto;\r\n    display: ${({ value }) => value ? \"flex\" : \"none\"};\r\n`","import axios from \"axios\"\r\nimport { store } from \"../../store\"\r\nimport { increment } from \"../../store/features/counterSlice\"\r\nimport { setRefreshData } from \"../../store/features/refreshDataSlice\"\r\nimport { setFalse } from \"../../store/features/refreshLoadingSlice\"\r\n\r\nconst TakeData2 = (prop) => {\r\n    const refreshLoading = store.getState().refreshLoading.value\r\n    if (refreshLoading === false) {\r\n        return prop\r\n    } else { return null }\r\n\r\n}\r\n\r\nexport const GetRefresh = (city) => {\r\n\r\n    const data = store.getState().refreshData.value\r\n    const loading = store.getState().refreshLoading.value\r\n\r\n    const temperature = Math.floor(TakeData2(loading ? '' : data.main.temp) - 273.15)\r\n    const feels_like = Math.floor(TakeData2(loading ? '' : data.main.feels_like) - 273.15)\r\n    const weatherImg = TakeData2(loading ? '50d' : data.weather[0].icon)\r\n    const description = TakeData2(loading ? '' : data.weather[0].main)\r\n\r\n    const storage = {\r\n        name: city,\r\n        temperature: temperature,\r\n        feels_like: feels_like,\r\n        weatherImg: weatherImg,\r\n        description: description\r\n    }\r\n\r\n    const apiKey = 'bfda20ca597bc0f4138fa15d276de911'\r\n    const URL = `https://api.openweathermap.org/data/2.5/weather?q=${city}&appid=${apiKey}`\r\n\r\n    axios.get(URL)\r\n        .then(res => {\r\n            store.dispatch(setRefreshData(res.data))\r\n            store.dispatch(setFalse())\r\n            store.dispatch(increment())\r\n            console.log('GetRefresh Res: ', res.data)\r\n        })\r\n        .then(() => {\r\n            localStorage.setItem(city, JSON.stringify(storage))\r\n            console.log(description)\r\n        })\r\n        .then(() => store.dispatch(increment()))\r\n        .catch(err => console.log(err))\r\n}\r\n","import React, { useState } from 'react'\r\nimport { Card, ListGroup, Image } from 'react-bootstrap'\r\nimport { CardStyled, ButtonStyled, SpinnerStyled } from './MainCardStyled'\r\nimport { useDispatch } from 'react-redux'\r\nimport { selectCount } from '../../../store/features/counterSlice'\r\nimport { increment } from '../../../store/features/counterSlice'\r\nimport { GetRefresh } from '../../../common/services/getRefresh'\r\nimport { setCity } from '../../../store/features/cityApiSlice'\r\nimport { GetWeather } from '../../../common/services/getWeather'\r\n\r\nexport const Cards = (props) => {\r\n  const name = props.name\r\n  const dispatch = useDispatch(selectCount)\r\n\r\n  const Delete = () => {\r\n    localStorage.removeItem(props.delete)\r\n    dispatch(increment())\r\n  }\r\n\r\n  const HandleShowInfo = () => {\r\n    dispatch(setCity(name))\r\n    GetWeather()\r\n    window.scrollTo(0, 0)\r\n  }\r\n\r\n  const [spinner, setSpinner] = useState(false)\r\n  const Handle = () => {\r\n    setSpinner(true)\r\n    GetRefresh(name)\r\n    setTimeout(() => {\r\n      GetRefresh(name)\r\n    }, 200);\r\n    setTimeout(() => {\r\n      setSpinner(false)\r\n    }, 400);\r\n  }\r\n\r\n  return (\r\n    <CardStyled value={spinner} >\r\n\r\n      <Card.Body onClick={HandleShowInfo}>\r\n        <Card.Title>{props.name}</Card.Title>\r\n\r\n        <ListGroup variant=\"flush\">\r\n\r\n          <ListGroup.Item>\r\n            <p>{props.description}</p>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <Image\r\n              src={`http://openweathermap.org/img/wn/${props.weatherImg}@2x.png`} alt='weather'\r\n              width='50px'\r\n              height='50px'\r\n            />\r\n            <span>{props.temperature} °C </span>\r\n          </ListGroup.Item>\r\n          <ListGroup.Item>\r\n            <p> Feels like {props.feels_like} °C</p>\r\n          </ListGroup.Item>\r\n        </ListGroup>\r\n\r\n        <SpinnerStyled animation=\"border\" variant=\"warning\" value={spinner} />\r\n      </Card.Body>\r\n      <ButtonStyled\r\n        variant='success'\r\n        onClick={Handle}\r\n        value={spinner}\r\n      >\r\n        Refresh\r\n      </ButtonStyled>\r\n      <ButtonStyled variant='danger' onClick={Delete}>Delete</ButtonStyled>\r\n    </CardStyled>\r\n  )\r\n}","import { Cards } from '../../components/main/cards'\r\n\r\n\r\nexport const CardList = () => {\r\n\r\n    const keys = Object.keys(localStorage)\r\n\r\n    const Data = () => {\r\n        const res = []\r\n        keys.forEach(element => {\r\n            const items = localStorage.getItem(element)\r\n            const parse = JSON.parse(items)\r\n            res.push(parse)\r\n        });\r\n        return res\r\n    }\r\n\r\n    const list = Data()\r\n\r\n    console.log(keys)\r\n\r\n    function storageAvailable(type) {\r\n        let storage;\r\n        try {\r\n            storage = window[type];\r\n            let x = 'Rome';\r\n            storage.setItem(x, x);\r\n            storage.removeItem(x);\r\n            return true;\r\n        }\r\n        catch (e) {\r\n            return e instanceof DOMException && (\r\n                // everything except Firefox\r\n                e.code === 22 ||\r\n                // Firefox\r\n                e.code === 1014 ||\r\n                // test name field too, because code might not be present\r\n                // everything except Firefox\r\n                e.name === 'QuotaExceededError' ||\r\n                // Firefox\r\n                e.name === 'NS_ERROR_DOM_QUOTA_REACHED') &&\r\n                // acknowledge QuotaExceededError only if there's something already stored\r\n                (storage && storage.length !== 0);\r\n        }\r\n    }\r\n\r\n    const Render = () => {\r\n\r\n        if (list.length > 0) {\r\n            return <>\r\n                {list.map(({\r\n                    name,\r\n                    temperature,\r\n                    feels_like,\r\n                    weatherImg,\r\n                    description\r\n                }, index) => {\r\n                    return <Cards\r\n                        name={name}\r\n                        temperature={temperature}\r\n                        feels_like={feels_like}\r\n                        weatherImg={weatherImg}\r\n                        description={description}\r\n                        delete={name}\r\n                        key={index} />\r\n                })}\r\n            </>\r\n        } else {\r\n            return <p className=\"text-center mt-5\">No saved cards</p>\r\n        }\r\n    }\r\n\r\n    return Render()\r\n\r\n}\r\n\r\n","import React from 'react'\r\nimport { WrapperStyled, Row1, Row2, Row3, Col1, Col2 } from './MainStyled'\r\nimport { SearchForm } from './searchForm'\r\nimport { CardInfo } from './CardInfo'\r\nimport { CardList } from '../../common/map'\r\nimport { useSelector } from 'react-redux'\r\nimport { selectCount } from '../../store/features/counterSlice'\r\n\r\nexport const Main = () => {\r\n\r\n    const count = useSelector(selectCount)\r\n\r\n    React.useEffect(() => { CardList() }, [count])\r\n\r\n    return (\r\n        <WrapperStyled>\r\n            <Row1>\r\n                <Col1>\r\n                    <SearchForm />\r\n                </Col1>\r\n            </Row1>\r\n            <Row2>\r\n                <Col2>\r\n                    <CardInfo />\r\n                </Col2>\r\n            </Row2>\r\n            <Row3>\r\n                <CardList />\r\n            </Row3>\r\n        </WrapperStyled>\r\n    )\r\n}\r\n","import React from 'react'\nimport { Header } from './components/header'\nimport { GlobalStyles } from './Global'\nimport { Main } from './components/main'\n\nconst App = () => {\n\n  return (\n    <>\n      <GlobalStyles />\n      <Header />\n      <Main />\n    </>\n  )\n}\n\nexport default App\n","import React from 'react'\nimport ReactDOM from 'react-dom'\nimport App from './App'\nimport { store } from './store'\nimport { Provider } from 'react-redux'\nimport 'bootstrap/dist/css/bootstrap.min.css'\n\n\nReactDOM.render(\n  <React.StrictMode>\n    <Provider store={store}>\n      <App />\n    </Provider>\n  </React.StrictMode>,\n  document.getElementById('root')\n)\n"],"sourceRoot":""}